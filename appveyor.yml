## RDP connection details
#init:
#  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

version: 0.1.0-0.dev.{build}

branches:
  only:
  - master

image: Visual Studio 2017

clone_folder: c:\projects\NWheels

install:
- cmd: nuget install OpenCover -Version 4.6.519 -OutputDirectory c:\projects\NWheels\Tools
- cmd: choco install codecov

nuget:
  project_feed: true

before_build:
- cmd: >-
    cd c:\projects\NWheels\Source

    dotnet --version

    dotnet restore

build_script:
- ps: >-
    $version_prefix_match = $env:APPVEYOR_BUILD_VERSION -match '(\d+)\.(\d+)\.(\d+)'

    $build_version_prefix = $matches[0]
    
    $assembly_build_version = "$build_version_prefix.$env:APPVEYOR_BUILD_NUMBER"
    
    echo "Assembly build version: $assembly_build_version"
    
    echo "--- current time is $(Get-Date) ---"

    dotnet build -c Debug -p:Version=$assembly_build_version -p:DebugType=Full -p:DebugSymbols=True

    echo "--- current time is $(Get-Date) ---"

    dotnet build -c Release -p:Version=$assembly_build_version

    echo "--- current time is $(Get-Date) ---"
    
test_script:
- ps: >-
    cd c:\projects\NWheels\Source

    $testRunStatus = "OK"

    $env:NW_SYSTEST_USE_COVER = "True"

    $env:NW_SYSTEST_COVER_EXE = "c:\projects\NWheels\Tools\OpenCover.4.6.519\tools\OpenCover.Console.exe"

    $env:NW_SYSTEST_COVER_ARGS_TEMPLATE = '-target:dotnet.exe "-targetargs:run --project [[PROJECT]] --no-build -- [[ARGS]]" -oldStyle -register:user -filter:"+[NWheels.*]* +[*]NWheels.* -[*.*Tests]*" -excludebyattribute:*.ExcludeFromCodeCoverage* ' + "-output:c:\projects\NWheels\Source\CoverageResults.xml -mergeoutput -returntargetcode:1000"

    $env:NW_SYSTEST_COVER_PROJECT_PLACEHOLDER = "[[PROJECT]]"

    $env:NW_SYSTEST_COVER_ARGS_PLACEHOLDER = "[[ARGS]]"
    
    $cert_path = "C:\projects\NWheels\Source\Samples\HelloWorld\NWheels.Samples.HelloWorld.HelloService\sslcert.pfx"
    
    $cert_password = ConvertTo-SecureString "12345" -AsPlainText -Force
    
    $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2
    
    $pfx.import($cert_path,$cert_password,"Exportable,PersistKeySet")
    
    $rootStore = Get-Item cert:\LocalMachine\Root
    
    $rootStore.Open("ReadWrite")
    
    $rootStore.Add($pfx)
    
    $rootStore.Close()

    Get-ChildItem -Directory -Recurse -Include *.UnitTests,*.IntegrationTests,*.Tests | Foreach { 
        echo "--- current time is $(Get-Date) ---"        
        echo --- "Running Unit + Integration tests in project" $_.fullName ---;     
        $dotnetArgs = '"-targetargs:test ' + $_.fullname + ' --no-build --no-restore -c Debug --filter ""(Purpose=UnitTest)|(Purpose=IntegrationTest)"""';
        c:\projects\NWheels\Tools\OpenCover.4.6.519\tools\OpenCover.Console.exe -target:dotnet.exe $dotnetArgs -oldStyle -register:user -filter:"+[NWheels.*]* +[*]NWheels.* -[*.*Tests]*" -excludebyattribute:*.ExcludeFromCodeCoverage* -output:c:\projects\NWheels\Source\CoverageResults.xml -mergeoutput -returntargetcode:1000
        echo "--- current time is $(Get-Date) ---"        
        if ($LastExitCode -ne 0) { $testRunStatus = "FAIL" }
    }

    Get-ChildItem -Directory -Recurse -Include *.SystemApiTests,*.SystemUITests,*.Tests | Foreach { 
        echo "--- current time is $(Get-Date) ---"        
        echo --- "Running System API + UI tests in project" $_.fullName ---;     
        dotnet test $_.fullname --no-build -c Debug --filter "(Purpose=SystemApiTest)|(Purpose=SystemUITest)"
        echo "--- current time is $(Get-Date) ---"        
        if ($LastExitCode -ne 0) { $testRunStatus = "FAIL" }
    }

    if ($testRunStatus -ne "OK") {
        throw "Some test runs FAILED"
    }

after_test:
- ps: >-
    dir -Path c:\projects\NWheels\Source\Templates\NWheels.Template\ -Recurse -Filter *.csproj | ForEach-Object {    
        echo "Patching: $($_.FullName)"
        (Get-Content -Path $_.FullName) -replace "0.0.0-REPLACE", $env:APPVEYOR_BUILD_VERSION | Set-Content $_.FullName
        echo "AFTER PATCH:"
        cat $_.FullName
    }                                                                                               

- cmd: >-
    cd c:\projects\NWheels

    codecov -f "c:\projects\NWheels\Source\CoverageResults.xml"
    
    cd c:\projects\NWheels\Source

    echo %APPVEYOR_BUILD_VERSION%
    
    dotnet pack -c Release --no-build -p:Version=%APPVEYOR_BUILD_VERSION% -p:Authors="felix-b" -p:Copyright="Copyright 2014 Felix Berman and contributors" -p:PackageLicenseUrl="https://github.com/felix-b/NWheels/blob/master/LICENSE" -p:PackageProjectUrl="http://nwheels.io" -p:PackageIconUrl="https://github.com/felix-b/NWheels/raw/master/Docs/Images/logo-132.png"

    nuget pack c:\projects\NWheels\Source\Templates\NWheels.Template\NWheels.Template.nuspec -Properties Version=%APPVEYOR_BUILD_VERSION%
   
on_success:
- ps: >-
    echo "--- current time is $(Get-Date) ---"

    cd c:\projects\NWheels\Source

    Get-ChildItem -File -Recurse -Include *.nupkg | Foreach {appveyor PushArtifact $_.fullName}
    
## Pause build until file from desktop will be removed
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
